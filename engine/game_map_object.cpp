
// ////////////////////////////////////////////////////////////////////////////
// Includes
// ////////////////////////////////////////////////////////////////////////////

#include <QDebug>
#include "game_map_object.h"

// ////////////////////////////////////////////////////////////////////////////
// Globals
// ////////////////////////////////////////////////////////////////////////////

QList<GameMapObject*> gameObjects;

// ////////////////////////////////////////////////////////////////////////////
// Constructor
// ////////////////////////////////////////////////////////////////////////////

GameMapObject::GameMapObject(QWidget *parent, int x, int y)
    : m_item(nullptr)
{
    this->m_point = QPointF(x, y);
    gameObjects.append(this);
}

// ////////////////////////////////////////////////////////////////////////////
// Methods
// ////////////////////////////////////////////////////////////////////////////

GameMapObject::~GameMapObject() {

    gameObjects.removeOne(this);
    delete this->m_item;

}

int GameMapObject::X() {
    return this->m_point.x();
}

int GameMapObject::Y() {
    return this->m_point.y();
}

QGraphicsItem* GameMapObject::getItem() {
    return this->m_item;
}

QPointF GameMapObject::point() {
    return this->m_point;
}

// ////////////////////////////////////////////////////////////////////////////
// Functions
// ////////////////////////////////////////////////////////////////////////////

QDebug operator<<(QDebug debug, GameMapObject* object) {
    QDebugStateSaver saver(debug);
    debug.nospace() << "GameObject(" << object->X() << "," << object->Y() << ")";
    return debug;
}
